[core]
# in ENV to avoid a DeprecationWarning:
dags_folder = /data/airflow/dags
base_log_folder = /data/airflow/logs
dag_processor_manager_log_location = /data/airflow/logs/dag_processor_manager.log
logging_level = INFO
fab_logging_level = WARN
executor = SequentialExecutor

# Log format
# Colour the logs when the controlling terminal is a TTY.
colored_console_log = True
colored_log_format = [%%(blue)s%%(asctime)s%%(reset)s] {%%(blue)s%%(filename)s:%%(reset)s%%(lineno)d} %%(log_color)s%%(levelname)s%%(reset)s - %%(log_color)s%%(message)s%%(reset)s
colored_formatter_class = airflow.utils.log.colored_log.CustomTTYColoredFormatter
log_format = [%%(asctime)s] {%%(filename)s:%%(lineno)d} %%(levelname)s - %%(message)s
simple_log_format = %%(asctime)s %%(levelname)s - %%(message)s
# Log filename format
log_filename_template = {{ "{{ ti.dag_id }}/{{ ti.task_id }}/{{ ts }}/{{ try_number }}.log" | quote }}
log_processor_filename_template = {{ "{{ filename }}.log" | quote }}
# many tasks running at a time in K8
parallelism = 0
max_active_runs_per_dag = 16
non_pooled_task_slot_count = 1024
dag_concurrency = 256

load_examples = True
plugins_folder = /data/airflow/plugins
default_timezone = utc

fernet_key = nwdYQkWlD4uzkqsOfLlGWQ3zBSQL9vMdwRwSXu7Q-Ic=

# remote logging
remote_logging = False
remote_base_log_folder =
remote_log_conn_id =
logging_config_class = contrib.DEFAULT_LOGGING_CONFIG

# s3 bucket should do this by default
encrypt_s3_logs = False

donot_pickle = False
secure_mode = False

enable_xcom_pickling = False
hostname_callable = socket:gethostname

default_task_retries = 5


sql_alchemy_conn = sqlite:///$AIRFLOW_HOME/airflow.db

# The encoding for the databases
sql_engine_encoding = utf-8

# Collation for `dag_id`, `task_id`, `key` columns in case they have different encoding.
# This is particularly useful in case of mysql with utf8mb4 encoding because
# primary keys for XCom table has too big size and `sql_engine_collation_for_ids` should
# be set to `utf8mb3_general_ci`
# sql_engine_collation_for_ids =

# If SqlAlchemy should pool database connections.
sql_alchemy_pool_enabled = True

# The SqlAlchemy pool size is the maximum number of database connections
# in the pool. 0 indicates no limit.
sql_alchemy_pool_size = 5

# The maximum overflow size of the pool.
# When the number of checked-out connections reaches the size set in pool_size,
# additional connections will be returned up to this limit.
# When those additional connections are returned to the pool, they are disconnected and discarded.
# It follows then that the total number of simultaneous connections the pool will allow
# is pool_size + max_overflow,
# and the total number of "sleeping" connections the pool will allow is pool_size.
# max_overflow can be set to -1 to indicate no overflow limit;
# no limit will be placed on the total number of concurrent connections. Defaults to 10.
sql_alchemy_max_overflow = 10

# The SqlAlchemy pool recycle is the number of seconds a connection
# can be idle in the pool before it is invalidated. This config does
# not apply to sqlite. If the number of DB connections is ever exceeded,
# a lower config value will allow the system to recover faster.
sql_alchemy_pool_recycle = 1800

# Check connection at the start of each connection pool checkout.
# Typically, this is a simple statement like "SELECT 1".
# More information here:
# https://docs.sqlalchemy.org/en/13/core/pooling.html#disconnect-handling-pessimistic
sql_alchemy_pool_pre_ping = True

# The schema to use for the metadata database.
# SqlAlchemy supports databases with the concept of multiple schemas.
sql_alchemy_schema =

[logging]
logging_level = INFO
fab_logging_level = WARN
colored_console_log = True
colored_log_format = [%%(blue)s%%(asctime)s%%(reset)s] {%%(blue)s%%(filename)s:%%(reset)s%%(lineno)d} %%(log_color)s%%(levelname)s%%(reset)s - %%(log_color)s%%(message)s%%(reset)s
colored_formatter_class = airflow.utils.log.colored_log.CustomTTYColoredFormatter
log_format = [%%(asctime)s] {%%(filename)s:%%(lineno)d} %%(levelname)s - %%(message)s
simple_log_format = %%(asctime)s %%(levelname)s - %%(message)s
# Log filename format
log_filename_template = {{ "{{ ti.dag_id }}/{{ ti.task_id }}/{{ ts }}/{{ try_number }}.log" | quote }}
log_processor_filename_template = {{ "{{ filename }}.log" | quote }}
# remote logging
remote_logging = False
remote_base_log_folder =
remote_log_conn_id =
logging_config_class = contrib.DEFAULT_LOGGING_CONFIG
# s3 bucket should do this by default
encrypt_s3_logs = False
base_log_folder = /data/airflow/logs
dag_processor_manager_log_location = /data/airflow/logs/dag_processor_manager/dag_processor_manager.log
task_log_reader = task


[cli]
api_client = airflow.api.client.json_client
endpoint_url = http://localhost:8080


[api]
auth_backend = airflow.api.auth.backend.default

[scheduler]

dag_dir_list_interval = 600
child_process_log_directory = /data/airflow/logs/scheduler
# Task instances listen for external kill signal (when you clear tasks
# from the CLI or the UI), this defines the frequency at which they should
# listen (in seconds).
job_heartbeat_sec = 30
max_threads = 6

# The scheduler constantly tries to trigger new tasks (look at the
# scheduler section in the docs for more information). This defines
# how often the scheduler should run (in seconds).
scheduler_heartbeat_sec = 5

# after how much time should the scheduler terminate in seconds
# -1 indicates to run continuously (see also num_runs)
# our "bash script" should keep restart things as needed
run_duration = -1
num_runs = -1

# after how much time a new DAGs should be picked up from the filesystem
min_file_process_interval = 5

# in k8 no need to do this very often (dags bag is static for now)
min_file_parsing_loop_time = 10

statsd_on = False
statsd_host = dd-agent-apps
statsd_port = 8125
statsd_prefix = airflow

print_stats_interval = 30
scheduler_zombie_task_threshold = 300
max_tis_per_query = 512

# Turn off scheduler catchup by setting this to False.
# Default behavior is unchanged and
# Command Line Backfills still work, but the scheduler
# will not do scheduler catchup if this is False,
# however it can be set on a per DAG basis in the
# DAG definition (catchup)
catchup_by_default = True

[webserver]
# The base url of your website as airflow cannot guess what domain or
# cname you are using. This is used in automated emails that
# airflow sends to point links to the right web server
base_url = http://localhost:8080

# The ip specified when starting the web server
web_server_host = 0.0.0.0

# The port on which to run the web server
web_server_port = 8080

# Paths to the SSL certificate and key for the web server. When both are
# provided SSL will be enabled. This does not change the web server port.
web_server_ssl_cert =
web_server_ssl_key =

# Number of seconds the webserver waits before killing gunicorn master that doesn't respond
web_server_master_timeout = 120

# Number of seconds the gunicorn webserver waits before timing out on a worker
web_server_worker_timeout = 120

# Number of workers to refresh at a time. When set to 0, worker refresh is
# disabled. When nonzero, airflow periodically refreshes webserver workers by
# bringing up new ones and killing old ones.
worker_refresh_batch_size = 1

# Number of seconds to wait before refreshing a batch of workers.
worker_refresh_interval = 600

# Secret key used to run your flask app
secret_key = hoxuWVGJvgPQLgkRy7gtdr

# Number of workers to run the Gunicorn web server
workers = 4

# The worker class gunicorn should use. Choices include
# sync (default), eventlet, gevent
worker_class = sync

# Log files for the gunicorn webserver. '-' means log to stderr.
access_logfile = -
error_logfile = -

# Expose the configuration file in the web server
expose_config = False

# Set to true to turn on authentication:
# https://airflow.incubator.apache.org/security.html#web-authentication

### XXX
authenticate = True
auth_backend = airflow.contrib.auth.backends.password_auth

# Filter the list of dags by owner name (requires authentication to be enabled)
filter_by_owner = False

# Filtering mode. Choices include user (default) and ldapgroup.
# Ldap group filtering requires using the ldap backend
#
# Note that the ldap server needs the "memberOf" overlay to be set up
# in order to user the ldapgroup mode.
owner_mode = user

# Default DAG view.  Valid values are:
# tree, graph, duration, gantt, landing_times
dag_default_view = tree

# Default DAG orientation. Valid values are:
# LR (Left->Right), TB (Top->Bottom), RL (Right->Left), BT (Bottom->Top)
dag_orientation = LR

# Puts the webserver in demonstration mode; blurs the names of Operators for
# privacy.
demo_mode = False

# The amount of time (in secs) webserver will wait for initial handshake
# while fetching logs from other worker machine
log_fetch_timeout_sec = 60

# By default, the webserver shows paused DAGs. Flip this to hide paused
# DAGs by default
hide_paused_dags_by_default = False

# Consistent page size across all listing views in the UI
page_size = 200

# Use FAB-based webserver with RBAC feature
rbac = True

# proxy fixer
enable_proxy_fix = True

[smtp]
# If you want airflow to send emails on retries, failure, and you want to use
# the airflow.utils.email.send_email_smtp function, you have to configure an
# smtp server here
smtp_host = localhost
smtp_starttls = True
smtp_ssl = False
# Uncomment and set the user/pass settings if you want to use SMTP AUTH
# smtp_user = airflow
# smtp_password = airflow
smtp_port = 25
smtp_mail_from = airflow@example.com

[kubernetes]


[kubernetes_labels]


[kubernetes_node_selectors]
# The Key-value pairs to be given to worker pods.
# The worker pods will be scheduled to the nodes of the specified key-value pairs.
# Should be supplied in the format: key = value

[kubernetes_secrets]

[kubernetes_environment_variables]

[ldap]


[github_enterprise]
api_rev = v3

[admin]
# UI to hide sensitive variable fields when set to True
hide_sensitive_variable_fields = True

#stupid bug in airflow
[elasticsearch]
elasticsearch_host =
